{"hiker.tests.c":"#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n    assert(answer() == 42);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n","hiker.c":"#include \"hiker.h\"\n\nint answer(void)\n{\n    return 6 * 7sdsd;\n}\n","hiker.h":"#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\nint answer(void);\n\n#endif\n","makefile":"CFLAGS += -I. -Wall -Wextra -Werror -std=c11\nCFLAGS +=\t-Wsequence-point\nCFLAGS +=\t-Wstrict-prototypes\nCFLAGS +=\t-Wmissing-prototypes\nCFLAGS +=\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<","cyber-dojo.sh":"make --always-make\n","output":"makefile:17: recipe for target 'test' failed\nhiker.c: In function 'answer':\nhiker.c:5:16: error: invalid suffix \"sdsd\" on integer constant\n     return 6 * 7sdsd;\n                ^\nhiker.c:6:1: error: control reaches end of non-void function [-Werror=return-type]\n }\n ^\ncc1: all warnings being treated as errors\nmake: *** [test] Error 1\n","instructions":"Write a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"}